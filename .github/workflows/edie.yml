name: EDIE

on:
  push:
  pull_request:

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
        arch: [x64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Build on Windows
        run: |
          mkdir build
          cd build
          echo "Starting build for Windows ${{ matrix.arch }}-${{ matrix.build_type }}"
          cmake .. -G "Visual Studio 16 2019" -A "${{ matrix.arch }}" -DARCH="${{ matrix.arch }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" -DCMAKE_LIB_SHARED:BOOL=ON -DGIT_BRANCH="${{ github.event.client_payload.pull_request.head.repo.default_branch }}"
          cmake --build . --config "${{ matrix.build_type }}"
          echo "Build for Windows ${{ matrix.arch }}-${{ matrix.build_type }} done!"

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-artifacts
          path: |
            build/**/**/**/test/${{ matrix.build_type }}/*.exe
            build/lib/**/*.so*
            bin/
            src/version*.*

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
        arch: [x64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Set up CMake
        run: sudo apt-get install -y cmake

      - name: Build on Linux
        run: |
          echo "Starting build for Linux ${{ matrix.arch }}-${{ matrix.build_type }}"
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            python3 scripts/generate_version.py "src/version.h.in" --git-server ${{ secrets.CI_SERVER_URL }} --git-token ${{ secrets.CI_DEPLOYMENT_TOKEN }} --git-project_id ${{ github.event.client_payload.pull_request.head.repo.id }} --sha ${{ github.event.client_payload.pull_request.head.sha }} --output-path "src" --get_new_version_file
          fi
          mkdir build
          cd build
          cmake -DARCH=${{ matrix.arch }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_SHARED_LIBS:BOOL=ON -DGIT_BRANCH="${{ github.event.client_payload.pull_request.head.repo.default_branch }}" ..
          make -j 8
          echo "Build for Linux ${{ matrix.arch }}-${{ matrix.build_type }} done!"

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-artifacts
          path: |
            build/**/**/**/test/${{ matrix.build_type }}/*Test
            build/lib/**/*.so*
            bin/
            src/version*.*
